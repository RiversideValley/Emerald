# .github/workflows/CI.yml
name: CI Build & Artifacts

on:
  push:
    branches:
      - main
      - release/**
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - release/**

# Use concurrency to cancel intermediate builds for PRs/pushes
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (${{ matrix.os }})
    # Run on Windows, macOS, and Linux
    runs-on: ${{ matrix.os }}
    # Treat macOS and Linux build failures as warnings (allow workflow to succeed)
    continue-on-error: ${{ matrix.os != 'windows-latest' }}

    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            # Adjust target framework based on your Emerald.csproj for Windows
            target_framework: 'net8.0-windows10.0.19041.0' 
            # Adjust this path if your output structure is different
            publish_path: './Emerald/bin/Release/${{ matrix.target_framework }}/win-x64/publish/' 
            artifact_name: 'Emerald-Windows'
            # Define the project path to build/publish
            project_path: './Emerald/Emerald.csproj' 

          - os: macos-latest
            platform: macos
            # Adjust target framework based on your Emerald.csproj for macOS
            target_framework: 'net8.0-maccatalyst' 
             # Adjust this path if your output structure is different
            publish_path: './Emerald/bin/Release/${{ matrix.target_framework }}/maccatalyst-x64/publish/'
            artifact_name: 'Emerald-macOS'
            project_path: './Emerald/Emerald.csproj'

          - os: ubuntu-latest
            platform: linux
            # Framework for Skia.Gtk head (often just net8.0, net7.0 etc.) Adjust as needed.
            target_framework: 'net8.0' 
            # Assuming a separate Skia.Gtk project. Adjust path if needed.
            # If your main project targets Skia.Gtk, use that path and adjust publish_path accordingly.
            project_path: './Emerald.Skia.Gtk/Emerald.Skia.Gtk.csproj' 
            # Adjust this path based on the Skia.Gtk project output
            publish_path: './Emerald.Skia.Gtk/bin/Release/${{ matrix.target_framework }}/publish/' 
            artifact_name: 'Emerald-Linux'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use latest version
        with:
          fetch-depth: 0 # Required for versioning schemes like Nerdbank.GitVersioning

      - name: Install Dependencies for ${{ matrix.platform }}
        timeout-minutes: 15 # Adjust timeout as needed
        uses: ./.github/steps/install_dependencies
        with:
          job-platform: ${{ matrix.platform }}
          # You can override dotnet-version here if needed per OS, otherwise uses default from action.yml
          # dotnet-version: '8.0.x' 

      - name: Build and Publish Emerald (${{ matrix.platform }})
        timeout-minutes: 20 # Adjust timeout as needed
        shell: pwsh # Use PowerShell Core, which is cross-platform
        run: |
          Write-Host "Publishing project: ${{ matrix.project_path }} for framework: ${{ matrix.target_framework }}"
          # Use dotnet publish - creates a runnable output layout
          # Use -f for multi-targeted projects (Windows/macOS). Skia.Gtk might not need -f if it's single-targeted.
          if ('${{ matrix.platform }}' -eq 'linux') {
            # Linux/Skia.Gtk often doesn't need -f if the project file targets only netX.0
            dotnet publish "${{ matrix.project_path }}" -c Release --no-self-contained
          } else {
            dotnet publish "${{ matrix.project_path }}" -c Release -f "${{ matrix.target_framework }}" --no-self-contained 
          }
          Write-Host "Publish completed."


      - name: Upload Artifact (${{ matrix.artifact_name }})
        # Only upload artifacts for pushes to main or release branches (like nightly builds)
        if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.publish_path }}
          retention-days: 7 # Optional: Adjust how long artifacts are kept
