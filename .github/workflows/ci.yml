name: CI

on:
  push:
    branches:
      - main
      - release/**

  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - release/**

env:
  STEP_TIMEOUT_MINUTES: 60

jobs:
  build_windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        timeout-minutes: ${{ fromJSON(env.STEP_TIMEOUT_MINUTES) }}
        run: |
          echo "Installing dependencies..."
          # Include your dependency installation commands here

      # Add MSBuild to the PATH
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.2.0
        
      - name: Restore NuGet packages
        shell: pwsh
        run: |
          dotnet restore ./Emerald/Emerald.csproj
          nuget restore ./Emerald/Emerald.csproj

      - name: Build Emerald (Windows)
        shell: pwsh
        run: msbuild ./Emerald/Emerald.csproj /p:Configuration=Release /t:Restore,Build
        
      - name: Create Windows Build Directory
        shell: pwsh
        run: |
          mkdir -p build-artifacts/windows
          Copy-Item -Path ./Emerald/bin/Release/* -Destination build-artifacts/windows -Recurse -ErrorAction SilentlyContinue
          if (-not (Test-Path -Path build-artifacts/windows/*)) {
            Write-Host "Warning: No build artifacts found. Creating empty directory."
            mkdir -p build-artifacts/windows/placeholder
            Set-Content -Path build-artifacts/windows/placeholder/README.txt -Value "Build may have failed. Check logs for details."
          }

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: emerald-windows-build
          path: build-artifacts/windows
          retention-days: 7
          if-no-files-found: warn

  build_macos:
    name: Build macOS
    runs-on: macos-latest
    continue-on-error: true  # This will make the workflow continue even if this job fails
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        timeout-minutes: ${{ fromJSON(env.STEP_TIMEOUT_MINUTES) }}
        run: |
          echo "Installing dependencies..."
          # Include your dependency installation commands here
        continue-on-error: true  # Continue even if dependency installation fails

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore NuGet packages (macOS)
        run: dotnet restore ./Emerald/Emerald.csproj
        continue-on-error: true

      - name: Build Emerald (macOS)
        run: dotnet build ./Emerald/Emerald.csproj -c Release
        continue-on-error: true  # Continue even if build fails
        
      - name: Create macOS Build Directory
        run: |
          mkdir -p build-artifacts/macos
          cp -r ./Emerald/bin/Release/* build-artifacts/macos/ 2>/dev/null || echo "No artifacts to copy"
          if [ ! "$(ls -A build-artifacts/macos)" ]; then
            echo "Warning: No build artifacts found. Creating empty directory."
            mkdir -p build-artifacts/macos/placeholder
            echo "Build may have failed. Check logs for details." > build-artifacts/macos/placeholder/README.txt
          fi
        continue-on-error: true

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: emerald-macos-build
          path: build-artifacts/macos
          retention-days: 7
          if-no-files-found: warn
        continue-on-error: true  # Continue even if there are no artifacts to upload

  build_linux:
    name: Build Linux
    runs-on: ubuntu-latest
    continue-on-error: true  # This will make the workflow continue even if this job fails
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        timeout-minutes: ${{ fromJSON(env.STEP_TIMEOUT_MINUTES) }}
        run: |
          echo "Installing dependencies..."
          # Include your dependency installation commands here
        continue-on-error: true  # Continue even if dependency installation fails

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore NuGet packages (Linux)
        run: dotnet restore ./Emerald/Emerald.csproj
        continue-on-error: true

      - name: Build Emerald (Linux)
        run: dotnet build ./Emerald/Emerald.csproj -c Release
        continue-on-error: true  # Continue even if build fails
        
      - name: Create Linux Build Directory
        run: |
          mkdir -p build-artifacts/linux
          cp -r ./Emerald/bin/Release/* build-artifacts/linux/ 2>/dev/null || echo "No artifacts to copy"
          if [ ! "$(ls -A build-artifacts/linux)" ]; then
            echo "Warning: No build artifacts found. Creating empty directory."
            mkdir -p build-artifacts/linux/placeholder
            echo "Build may have failed. Check logs for details." > build-artifacts/linux/placeholder/README.txt
          fi
        continue-on-error: true

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: emerald-linux-build
          path: build-artifacts/linux
          retention-days: 7
          if-no-files-found: warn
        continue-on-error: true  # Continue even if there are no artifacts to upload

  create_nightly:
    name: Create Nightly Build
    needs: [build_windows, build_macos, build_linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only run on main branch
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Create nightly release
        uses: softprops/action-gh-release@v1
        with:
          name: Nightly Build ${{ steps.date.outputs.date }}
          tag_name: nightly-${{ steps.date.outputs.date }}
          prerelease: true
          files: all-artifacts/**/*
          body: |
            Nightly build created on ${{ steps.date.outputs.date }}
            
            This is an automated nightly build from the latest code in the main branch.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
